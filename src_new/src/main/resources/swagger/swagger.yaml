openapi: 3.0.3
info:
  title: Swagger HearBase - OpenAPI 3.0
  version: 1.0.11
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: users
    description: Operations about users
  - name: bases
    description: Operations about bases
  - name: rooms
    description: Operations about rooms
  - name: rehearsals
    description: Operations about rehearsals
paths:
  /users:
    post:
      tags:
        - users
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: User already exists
  /login:
    post:
      tags:
        - users
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              required:
                - mail
                - password
              type: object
              properties:
                mail:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /logout:
    get:
      tags:
        - users
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        '200':
          description: successful operation
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /users/{userId}:
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid userId supplied
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: User not found
      security:
        - bearerAuth: []
  /rooms:
    get:
      tags:
        - rooms
      summary: Finds all registered rooms
      operationId: findAllRooms
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /rooms/{roomId}:
    get:
      tags:
        - rooms
      summary: Finds room by ID
      operationId: findRoom
      parameters:
        - name: roomId
          in: path
          description: ID of room to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Invalid ID value
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Room not found
      security:
        - bearerAuth: []
  /users/{userId}/rehearsals:
    get:
      tags:
        - users
      summary: Finds all rehearsals of specified musician
      operationId: findRehsByUser
      parameters:
        - name: userId
          in: path
          description: ID of musician
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rehearsal'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rehearsal'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /rehearsals/{rehearId}:
    get:
      tags:
        - rehearsals
      summary: Finds the rehearsal by ID
      operationId: findReh
      parameters:
        - name: rehearId
          in: path
          description: ID of rehearsal
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rehearsal'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rehearsal'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Rehearsal not found
      security:
        - bearerAuth: []
  /users/{userId}/rooms/{roomId}/rehearsals:
    post:
      tags:
        - users
      summary: Creates a rehearsal
      operationId: createReh
      parameters:
        - name: userId
          in: path
          description: ID of musician
          required: true
          schema:
            type: integer
            format: int64
        - name: roomId
          in: path
          description: ID of room
          required: true
          schema:
            type: integer
            format: int64
        - name: date
          in: query
          description: date and time of rehearsal
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rehearsal'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rehearsal'
        '400':
          description: Invalid input
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /rehearsals/{rehId}:
    delete:
      tags:
        - rehearsals
      summary: Deletes a rehearsal
      operationId: deleteReh
      parameters:
        - name: rehId
          in: path
          description: ID of rehearsal to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Rehearsal not found
      security:
        - bearerAuth: []
  /users/{userId}/bases/all:
    get:
      tags:
        - users
      summary: Finds all owner's bases
      operationId: findBases
      parameters:
        - name: userId
          in: path
          description: ID of owner
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RehBase'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RehBase'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /bases/{baseId}/rehearsals:
    get:
      tags:
        - bases
      summary: Finds all rehearsals by base
      operationId: findRehsByBase
      parameters:
        - name: baseId
          in: path
          description: ID of reh base
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rehearsal'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rehearsal'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /users/{userId}/bases:
    post:
      tags:
        - users
      summary: Creates a reh base
      operationId: createBase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RehBase'
          application/xml:
            schema:
              $ref: '#/components/schemas/RehBase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RehBase'
        required: true
      parameters:
        - name: userId
          in: path
          description: ID of owner
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RehBase'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '405':
          description: Invalid input
      security:
        - bearerAuth: []
  /bases/{baseId}/rooms:
    post:
      tags:
        - bases
      summary: Creates room in reh base
      operationId: createRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
          application/xml:
            schema:
              $ref: '#/components/schemas/Room'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Room'
        required: true
      parameters:
        - name: baseId
          in: path
          description: ID of reh base
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '405':
          description: Invalid input
      security:
        - bearerAuth: []
  /bases/{baseId}:
    delete:
      tags:
        - bases
      summary: Delete reh base by ID
      operationId: deleteBase
      parameters:
        - name: baseId
          in: path
          description: ID of reh base that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Reh base not found
      security:
        - bearerAuth: []
components:
  schemas:
    Room:
      required:
        - id
        - base
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: yellow
        type:
          type: string
          enum:
            - band
            - vocal
            - drum
        area:
          type: integer
          format: int64
          example: 10
        cost:
          type: integer
          format: int64
          example: 10
        base:
          $ref: '#/components/schemas/RehBase'
      xml:
        name: room
    RehBase:
      required:
        - id
        - owner
        - name
        - address
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: yellow
        address:
          type: string
        phone:
          type: string
        mail:
          type: string
        owner:
          $ref: '#/components/schemas/User'
      xml:
        name: rehbase
    User:
      required:
        - id
        - name
        - password
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Anna
        phone:
          type: string
        mail:
          type: string
        password:
          type: string
      xml:
        name: account
    Rehearsal:
      required:
        - id
        - musician
        - room
        - date
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        date:
          type: string
        room:
          $ref: '#/components/schemas/Room'
        musician:
          $ref: '#/components/schemas/User'
      xml:
        name: rehearsal
  requestBodies:
    Room:
      description: Room object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Room'
        application/xml:
          schema:
            $ref: '#/components/schemas/Room'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    hearbase_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:8000/oauth/authorize
          scopes:
            write: modify in your account
            read: read in your account
    api_key:
      type: apiKey
      name: api_key
      in: header